.\"Created with GNOME Manpages Editor Wizard
.\"http://sourceforge.net/projects/gmanedit2
.TH mkxlblob 1 "23 February 2011" "" "Generate PIC bootstub code for XL-Boot"

.SH NAME
mkxlblob \- Generate PIC bootstub code for XL-Boot

.SH SYNOPSIS
.B mkxlblob
.RI [ options ]
.PP
.B mkxlblob
[ -n name ] [ -r addr ] -t type -o blob elf
.br
.B mkxlblob
[ -n name ] -t type -b elf
.br
.B mkxlblob
-h | -v
.br

.SH DESCRIPTION
This manual page explains the
.B mkxlblob
command.
.PP
The
.B mkxlblob
command is used to create combined images for use with the XL-Boot boot loader. These images
are refered as XL-Blob. The XL-Blob consists of a simple bootstub code and payload data. These
payload data can contain a second stage boot loader, the linux kernel, other os, firmware images,
etc. The bootstub code is a simple PIC executable blob that copies payload data to its linked
address and executes it.
.PP
\fBmkxlblob\fP generates blob.[srec|elf|bin|lst] files into the working directory.
.PP
\fBmkxlblob\fP supports only the Microblaze architecture.
.PP
The combined images has the following structure:
.B
.IP offset 16
.B type: description
.B
.IP 0x00
\fB32 bit:\fP XL-Blob magic key \fI0xb8b40008\fP, Microblaze assembler mnemonic: \fIBRLID R5, 0x08\fP
.B
.IP 0x04
\fB32 bit:\fP reserved, Microblaze assembler mnemonic: NOP
.B
.IP 0x08
\fB88 byte:\fP PIC executable bootstub code
.B
.IP 0x60
\fBxx byte:\fP payload data with header (see below)
.PP
\fBmkxlblob\fP supports different payload header formats but until now only one format is valid:
.PP
The current
.I V1 payload header
format adds a 80 byte header to raw payload data and concatenates with the PIC executable
bootstub code. The V1 payload header containing information about type of content, entry point,
data size, time stamp, etc. There is no checksum. The header has the following structure:
.B
.IP offset 16
.B type: description
.B
.IP 0x00
\fB16 bit:\fP version of payload header, for V1 payload header \fI0x0100\fP
.B
.IP 0x02
\fB16 bit:\fP type of payload data (see below)
.B
.IP 0x04
\fB32 bit:\fP reserved for user data
.B
.IP 0x08
\fB32 byte:\fP name string of payload data
.B
.IP 0x28
\fB32 byte:\fP builddate string of payload data
.B
.IP 0x48
\fB32 bit:\fP linked address of payload data
.B
.IP 0x4C
\fB32 bit:\fP size of payload data
.B
.IP 0x50
\fBxx byte:\fP payload data
.PP
The
.B V1 payload header
supports different payload content types (at offset 0x02):
.B
.IP code 16
.B description
.B
.IP 0x0100
\fBStandalone:\fP Xilinx standalone application, binary image
.B
.IP 0x0200
\fBXilkernel:\fP Xilinx xilkernel application, binary image
.B
.IP 0x0300
\fBeCos:\fP FSF RedBoot/eCos application, binary image
.B
.IP 0x0400
\fBFreeRTOS:\fP FreeRTOS/SafeRTOS application, binary image
.B
.IP 0x0500
\fBU-Boot:\fP U-Boot second stage boot loader, binary image
.B
.IP 0x0600
\fBLinux:\fP Linux kernel, binary image

.SH OPTIONS
.B Generate XL-Blob with V1 payload header:
.TP
.BI "\-o [" "blob file name" "]"
Write out XL-Blob to 'blob file name'.
.TP
.BI "\-t [" "payload data type" "]"
Set payload data type code on offset 0x02.
Use option -h to see the list of supported image type.
.TP
.BI "\-n [" "payload data name" "]"
Set payload data description string on offset 0x08.
.TP
.BI "\-r [" "realoc address" "]"
Realocate the bootstub code to 'realoc address'.
In common cases it is unnecessary and optional.
.PP
.B Write out the bootstub code of XL-Blob to standard output:
.TP
.BI "\-b"
Disable code assembly and print our the bootstub code to standard output.
.TP
.BI "\-t [" "payload data type" "]"
Set payload data type code on offset 0x02.
Use option -h to see the list of supported image type.
.TP
.BI "\-n [" "payload data name" "]"
Set payload data description string on offset 0x08.
.PP
.B Help end version output:
.TP
.BI "\-h"
Print out a short help message.
.TP
.BI "\-v"
Print out a short version and copyright message.

.SH "EXIT STATUS"
An exit status of zero indicates success. A non-zero exit status indicates failure.
.TP
.BI 0
Success
.TP
.BI 1
Operating error
.TP
.BI 3
Wrong interpreter
.br
\fBmkxlblob\fP is a Bash shell script and demanded on Bash version 3 or above.

.SH EXAMPLE
Create XL-Blob with optional reallocation to 0xA0000000 for Linux kernel from ELF file vmlinux:
.nf
.B mkxlblob -n """Linux kernel""" -r 0xa0000000 -t Linux -o linux-xl vmlinux
.PP
Show PIC bootstub code for U-Boot from ELF file u-boot.elf:
.nf
.B mkxlblob -n """U-Boot""" -t U-Boot -b u-boot.elf

.SH "CONFORMING TO"
XL-Boot is the open source reimplementation of PeaLogix's FS-BOOT. Images that were
created by mkxlblob can be launched both from XL-Boot and from FS-BOOT.

.SH BUGS
Please report bugs! Reporting bugs to @PACKAGE_BUGREPORT@.

.SH VERSIONS
This man page is current for version @PACKAGE_VERSION@ of @PACKAGE_NAME@.

.SH CREDITS
mkxlblob is distributed under the GNU public license.  See the file COPYING for details.
.PP
A German WEB site is available at http://www.li-pro.de/xilinx_mb:mbref:start
.PP
I would be delighted to hear from you if you like this program.  Please contact me.

.SH THANKS
Especial thanks go out to PetaLogix for the famous idea to use a Microblaze assembler
mnemonic to mark an valid executable blob.

.SH AUTHOR
This manual page was written by Stephan Linz <linz@li-pro.net>

